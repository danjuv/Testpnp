/// <reference types="node" />
import { CreateReadStreamOptions, CreateWriteStreamOptions, BasePortableFakeFS } from './FakeFS';
import { FakeFS, WriteFileOptions } from './FakeFS';
import { PortablePath } from './path';
export declare type ZipOpenFSOptions = {
    baseFs?: FakeFS<PortablePath>;
    filter?: RegExp | null;
    useCache?: boolean;
};
export declare class ZipOpenFS extends BasePortableFakeFS {
    static open<T>(fn: (zipOpenFs: ZipOpenFS) => Promise<T>): Promise<T>;
    static openPromise<T>(fn: (zipOpenFs: ZipOpenFS) => Promise<T>): Promise<T>;
    private readonly baseFs;
    private readonly zipInstances;
    private readonly filter?;
    private isZip;
    private notZip;
    constructor({ baseFs, filter, useCache }?: ZipOpenFSOptions);
    getRealPath(): PortablePath;
    saveAndClose(): void;
    discardAndClose(): void;
    openPromise(p: PortablePath, flags: string, mode?: number): Promise<number>;
    openSync(p: PortablePath, flags: string, mode?: number): number;
    closePromise(fd: number): Promise<void>;
    closeSync(fd: number): void;
    createReadStream(p: PortablePath | null, opts?: CreateReadStreamOptions): import("fs").ReadStream;
    createWriteStream(p: PortablePath | null, opts?: CreateWriteStreamOptions): import("fs").WriteStream;
    realpathPromise(p: PortablePath): Promise<PortablePath>;
    realpathSync(p: PortablePath): PortablePath;
    existsPromise(p: PortablePath): Promise<boolean>;
    existsSync(p: PortablePath): boolean;
    accessPromise(p: PortablePath, mode?: number): Promise<void>;
    accessSync(p: PortablePath, mode?: number): void;
    statPromise(p: PortablePath): Promise<import("fs").Stats>;
    statSync(p: PortablePath): import("fs").Stats;
    lstatPromise(p: PortablePath): Promise<import("fs").Stats>;
    lstatSync(p: PortablePath): import("fs").Stats;
    chmodPromise(p: PortablePath, mask: number): Promise<void>;
    chmodSync(p: PortablePath, mask: number): void;
    renamePromise(oldP: PortablePath, newP: PortablePath): Promise<void>;
    renameSync(oldP: PortablePath, newP: PortablePath): void;
    copyFilePromise(sourceP: PortablePath, destP: PortablePath, flags?: number): Promise<void>;
    copyFileSync(sourceP: PortablePath, destP: PortablePath, flags?: number): void;
    writeFilePromise(p: PortablePath, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): Promise<void>;
    writeFileSync(p: PortablePath, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): void;
    unlinkPromise(p: PortablePath): Promise<void>;
    unlinkSync(p: PortablePath): void;
    utimesPromise(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): Promise<void>;
    utimesSync(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): void;
    mkdirPromise(p: PortablePath): Promise<void>;
    mkdirSync(p: PortablePath): void;
    rmdirPromise(p: PortablePath): Promise<void>;
    rmdirSync(p: PortablePath): void;
    symlinkPromise(target: PortablePath, p: PortablePath): Promise<void>;
    symlinkSync(target: PortablePath, p: PortablePath): void;
    readFilePromise(p: PortablePath, encoding: 'utf8'): Promise<string>;
    readFilePromise(p: PortablePath, encoding?: string): Promise<Buffer>;
    readFileSync(p: PortablePath, encoding: 'utf8'): string;
    readFileSync(p: PortablePath, encoding?: string): Buffer;
    readdirPromise(p: PortablePath): Promise<import("./path").Filename[]>;
    readdirSync(p: PortablePath): import("./path").Filename[];
    readlinkPromise(p: PortablePath): Promise<PortablePath>;
    readlinkSync(p: PortablePath): PortablePath;
    private makeCallPromise;
    private makeCallSync;
    private findZip;
    private getZipPromise;
    private getZipSync;
}

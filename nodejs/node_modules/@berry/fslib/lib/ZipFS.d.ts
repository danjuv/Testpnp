/// <reference types="node" />
import { ReadStream, Stats, WriteStream } from 'fs';
import { CreateReadStreamOptions, CreateWriteStreamOptions, BasePortableFakeFS } from './FakeFS';
import { FakeFS, WriteFileOptions } from './FakeFS';
import { PortablePath, Filename } from './path';
export declare type ZipBufferOptions = {
    readOnly?: boolean;
    stats?: Stats;
};
export declare type ZipPathOptions = ZipBufferOptions & {
    baseFs?: FakeFS<PortablePath>;
    create?: boolean;
};
export declare class ZipFS extends BasePortableFakeFS {
    private readonly baseFs;
    private readonly path;
    private readonly stats;
    private readonly zip;
    private readonly listings;
    private readonly entries;
    private ready;
    constructor(p: PortablePath, opts: ZipPathOptions);
    constructor(data: Buffer, opts: ZipBufferOptions);
    getAllFiles(): PortablePath[];
    getRealPath(): PortablePath;
    saveAndClose(): void;
    discardAndClose(): void;
    openPromise(p: string, flags: string, mode?: number): Promise<never>;
    openSync(p: string, flags: string, mode?: number): never;
    closePromise(fd: number): Promise<void>;
    closeSync(fd: number): never;
    createReadStream(p: PortablePath | null, { encoding }?: CreateReadStreamOptions): ReadStream;
    createWriteStream(p: PortablePath | null, { encoding }?: CreateWriteStreamOptions): WriteStream;
    realpathPromise(p: PortablePath): Promise<PortablePath>;
    realpathSync(p: PortablePath): PortablePath;
    existsPromise(p: PortablePath): Promise<boolean>;
    existsSync(p: PortablePath): boolean;
    accessPromise(p: PortablePath, mode?: number): Promise<void>;
    accessSync(p: PortablePath, mode?: number): void;
    statPromise(p: PortablePath): Promise<Stats>;
    statSync(p: PortablePath): Stats;
    lstatPromise(p: PortablePath): Promise<Stats>;
    lstatSync(p: PortablePath): Stats;
    private statImpl;
    private getUnixMode;
    private registerListing;
    private registerEntry;
    private resolveFilename;
    private allocateBuffer;
    private allocateUnattachedSource;
    private allocateSource;
    private setFileSource;
    private isSymbolicLink;
    private getFileSource;
    chmodPromise(p: PortablePath, mask: number): Promise<void>;
    chmodSync(p: PortablePath, mask: number): void;
    renamePromise(oldP: PortablePath, newP: PortablePath): Promise<never>;
    renameSync(oldP: PortablePath, newP: PortablePath): never;
    copyFilePromise(sourceP: PortablePath, destP: PortablePath, flags?: number): Promise<void>;
    copyFileSync(sourceP: PortablePath, destP: PortablePath, flags?: number): void;
    writeFilePromise(p: PortablePath, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): Promise<void>;
    writeFileSync(p: PortablePath, content: string | Buffer | ArrayBuffer | DataView, opts?: WriteFileOptions): void;
    unlinkPromise(p: PortablePath): Promise<void>;
    unlinkSync(p: PortablePath): void;
    utimesPromise(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): Promise<void>;
    utimesSync(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): void;
    lutimesPromise(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): Promise<void>;
    lutimesSync(p: PortablePath, atime: Date | string | number, mtime: Date | string | number): void;
    private utimesImpl;
    mkdirPromise(p: PortablePath): Promise<void>;
    mkdirSync(p: PortablePath): void;
    rmdirPromise(p: PortablePath): Promise<void>;
    rmdirSync(p: PortablePath): void;
    private hydrateDirectory;
    symlinkPromise(target: PortablePath, p: PortablePath): Promise<void>;
    symlinkSync(target: PortablePath, p: PortablePath): void;
    readFilePromise(p: PortablePath, encoding: 'utf8'): Promise<string>;
    readFilePromise(p: PortablePath, encoding?: string): Promise<Buffer>;
    readFileSync(p: PortablePath, encoding: 'utf8'): string;
    readFileSync(p: PortablePath, encoding?: string): Buffer;
    readdirPromise(p: PortablePath): Promise<Filename[]>;
    readdirSync(p: PortablePath): Array<Filename>;
    readlinkPromise(p: PortablePath): Promise<PortablePath>;
    readlinkSync(p: PortablePath): PortablePath;
}

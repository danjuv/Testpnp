"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const NodeFS_1 = require("./NodeFS");
var path_1 = require("./path");
exports.PortablePath = path_1.PortablePath;
var path_2 = require("./path");
exports.npath = path_2.npath;
exports.ppath = path_2.ppath;
exports.toFilename = path_2.toFilename;
var AliasFS_1 = require("./AliasFS");
exports.AliasFS = AliasFS_1.AliasFS;
var FakeFS_1 = require("./FakeFS");
exports.FakeFS = FakeFS_1.FakeFS;
var CwdFS_1 = require("./CwdFS");
exports.CwdFS = CwdFS_1.CwdFS;
var JailFS_1 = require("./JailFS");
exports.JailFS = JailFS_1.JailFS;
var LazyFS_1 = require("./LazyFS");
exports.LazyFS = LazyFS_1.LazyFS;
var NodeFS_2 = require("./NodeFS");
exports.NodeFS = NodeFS_2.NodeFS;
var PosixFS_1 = require("./PosixFS");
exports.PosixFS = PosixFS_1.PosixFS;
var ProxiedFS_1 = require("./ProxiedFS");
exports.ProxiedFS = ProxiedFS_1.ProxiedFS;
var VirtualFS_1 = require("./VirtualFS");
exports.VirtualFS = VirtualFS_1.VirtualFS;
var ZipFS_1 = require("./ZipFS");
exports.ZipFS = ZipFS_1.ZipFS;
var ZipOpenFS_1 = require("./ZipOpenFS");
exports.ZipOpenFS = ZipOpenFS_1.ZipOpenFS;
function patchFs(patchedFs, fakeFs) {
    const SYNC_IMPLEMENTATIONS = new Set([
        `accessSync`,
        `createReadStream`,
        `chmodSync`,
        `copyFileSync`,
        `lstatSync`,
        `openSync`,
        `readlinkSync`,
        `readFileSync`,
        `readdirSync`,
        `readlinkSync`,
        `realpathSync`,
        `rmdirSync`,
        `statSync`,
        `symlinkSync`,
        `unlinkSync`,
        `utimesSync`,
        `writeFileSync`,
    ]);
    const ASYNC_IMPLEMENTATIONS = new Set([
        `accessPromise`,
        `chmodPromise`,
        `copyFilePromise`,
        `lstatPromise`,
        `openPromise`,
        `readdirPromise`,
        `realpathPromise`,
        `readFilePromise`,
        `readdirPromise`,
        `readlinkPromise`,
        `rmdirPromise`,
        `statPromise`,
        `symlinkPromise`,
        `unlinkPromise`,
        `utimesPromise`,
        `writeFilePromise`,
    ]);
    patchedFs.existsSync = (p) => {
        try {
            return fakeFs.existsSync(p);
        }
        catch (error) {
            return false;
        }
    };
    patchedFs.exists = (p, callback) => {
        fakeFs.existsPromise(p).then(result => {
            if (callback) {
                callback(result);
            }
        }, () => {
            if (callback) {
                callback(false);
            }
        });
    };
    for (const fnName of ASYNC_IMPLEMENTATIONS) {
        const fakeImpl = fakeFs[fnName].bind(fakeFs);
        const origName = fnName.replace(/Promise$/, ``);
        patchedFs[origName] = (...args) => {
            const hasCallback = typeof args[args.length - 1] === `function`;
            const callback = hasCallback ? args.pop() : () => { };
            fakeImpl(...args).then((result) => {
                callback(undefined, result);
            }, (error) => {
                callback(error);
            });
        };
    }
    for (const fnName of SYNC_IMPLEMENTATIONS) {
        const fakeImpl = fakeFs[fnName].bind(fakeFs);
        const origName = fnName;
        patchedFs[origName] = fakeImpl;
    }
    patchedFs.realpathSync.native = patchedFs.realpathSync;
    patchedFs.realpath.native = patchedFs.realpath;
}
exports.patchFs = patchFs;
function extendFs(realFs, fakeFs) {
    const patchedFs = Object.create(realFs);
    patchFs(patchedFs, fakeFs);
    return patchedFs;
}
exports.extendFs = extendFs;
exports.xfs = new NodeFS_1.NodeFS();

export declare type PortablePath = string & {
    _portable_path: true;
};
export declare type NativePath = string & {
    _portable_path?: false;
};
export declare const PortablePath: {
    root: PortablePath;
    dot: PortablePath;
};
export declare type Filename = (PortablePath & NativePath) & {
    _filename: false;
};
export declare type Path = PortablePath | NativePath;
export declare const npath: PathUtils<NativePath>;
export declare const ppath: PathUtils<PortablePath>;
export interface ParsedPath<P extends Path> {
    root: P;
    dir: P;
    base: Filename;
    ext: string;
    name: Filename;
}
export interface FormatInputPathObject<P extends Path> {
    root?: P;
    dir?: P;
    base?: Filename;
    ext?: string;
    name?: Filename;
}
export interface PathUtils<P extends Path> {
    normalize(p: P): P;
    join(...paths: (P | Filename)[]): P;
    resolve(...pathSegments: (P | Filename)[]): P;
    isAbsolute(path: P): boolean;
    relative(from: P, to: P): P;
    dirname(p: P): P;
    basename(p: P, ext?: string): Filename;
    extname(p: P): string;
    readonly sep: P;
    readonly delimiter: string;
    parse(pathString: P): ParsedPath<P>;
    format(pathObject: FormatInputPathObject<P>): P;
}
export declare function fromPortablePath(p: Path): NativePath;
export declare function toPortablePath(p: Path): PortablePath;
export declare function convertPath<P extends Path>(targetPathUtils: PathUtils<P>, sourcePath: Path): P;
export declare function toFilename(filename: string): Filename;

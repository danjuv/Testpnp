"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const libzip_1 = __importDefault(require("./libzip"));
const number64 = [
    `number`,
    `number`,
];
// eslint-disable-next-line arca/no-default-export
exports.default = {
    // Those are getters because they can change after memory growth
    get HEAP8() { return libzip_1.default.HEAP8; },
    get HEAPU8() { return libzip_1.default.HEAPU8; },
    ZIP_CHECKCONS: 4,
    ZIP_CREATE: 1,
    ZIP_EXCL: 2,
    ZIP_TRUNCATE: 8,
    ZIP_RDONLY: 16,
    ZIP_FL_OVERWRITE: 8192,
    ZIP_OPSYS_DOS: 0x00,
    ZIP_OPSYS_AMIGA: 0x01,
    ZIP_OPSYS_OPENVMS: 0x02,
    ZIP_OPSYS_UNIX: 0x03,
    ZIP_OPSYS_VM_CMS: 0x04,
    ZIP_OPSYS_ATARI_ST: 0x05,
    ZIP_OPSYS_OS_2: 0x06,
    ZIP_OPSYS_MACINTOSH: 0x07,
    ZIP_OPSYS_Z_SYSTEM: 0x08,
    ZIP_OPSYS_CPM: 0x09,
    ZIP_OPSYS_WINDOWS_NTFS: 0x0a,
    ZIP_OPSYS_MVS: 0x0b,
    ZIP_OPSYS_VSE: 0x0c,
    ZIP_OPSYS_ACORN_RISC: 0x0d,
    ZIP_OPSYS_VFAT: 0x0e,
    ZIP_OPSYS_ALTERNATE_MVS: 0x0f,
    ZIP_OPSYS_BEOS: 0x10,
    ZIP_OPSYS_TANDEM: 0x11,
    ZIP_OPSYS_OS_400: 0x12,
    ZIP_OPSYS_OS_X: 0x13,
    uint08S: libzip_1.default._malloc(1),
    uint16S: libzip_1.default._malloc(2),
    uint32S: libzip_1.default._malloc(4),
    uint64S: libzip_1.default._malloc(8),
    malloc: libzip_1.default._malloc,
    free: libzip_1.default._free,
    getValue: libzip_1.default.getValue,
    open: libzip_1.default.cwrap(`zip_open`, `number`, [`string`, `number`, `number`]),
    openFromSource: libzip_1.default.cwrap(`zip_open_from_source`, `number`, [`number`, `number`, `number`]),
    close: libzip_1.default.cwrap(`zip_close`, `number`, [`number`]),
    discard: libzip_1.default.cwrap(`zip_discard`, `void`, [`number`]),
    getError: libzip_1.default.cwrap(`zip_get_error`, `number`, [`number`]),
    getName: libzip_1.default.cwrap(`zip_get_name`, `string`, [`number`, `number`, `number`]),
    getNumEntries: libzip_1.default.cwrap(`zip_get_num_entries`, `number`, [`number`, `number`]),
    stat: libzip_1.default.cwrap(`zip_stat`, `number`, [`number`, `string`, `number`, `number`]),
    statIndex: libzip_1.default.cwrap(`zip_stat_index`, `number`, [`number`, ...number64, `number`, `number`]),
    fopen: libzip_1.default.cwrap(`zip_fopen`, `number`, [`number`, `string`, `number`]),
    fopenIndex: libzip_1.default.cwrap(`zip_fopen_index`, `number`, [`number`, ...number64, `number`]),
    fread: libzip_1.default.cwrap(`zip_fread`, `number`, [`number`, `number`, `number`, `number`]),
    fclose: libzip_1.default.cwrap(`zip_fclose`, `number`, [`number`]),
    dir: {
        add: libzip_1.default.cwrap(`zip_dir_add`, `number`, [`number`, `string`]),
    },
    file: {
        add: libzip_1.default.cwrap(`zip_file_add`, `number`, [`number`, `string`, `number`, `number`]),
        getError: libzip_1.default.cwrap(`zip_file_get_error`, `number`, [`number`]),
        getExternalAttributes: libzip_1.default.cwrap(`zip_file_get_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),
        setExternalAttributes: libzip_1.default.cwrap(`zip_file_set_external_attributes`, `number`, [`number`, ...number64, `number`, `number`, `number`]),
        setMtime: libzip_1.default.cwrap(`zip_file_set_mtime`, `number`, [`number`, ...number64, `number`, `number`]),
    },
    error: {
        initWithCode: libzip_1.default.cwrap(`zip_error_init_with_code`, `void`, [`number`, `number`]),
        strerror: libzip_1.default.cwrap(`zip_error_strerror`, `string`, [`number`]),
    },
    name: {
        locate: libzip_1.default.cwrap(`zip_name_locate`, `number`, [`number`, `string`, `number`]),
    },
    source: {
        fromUnattachedBuffer: libzip_1.default.cwrap(`zip_source_buffer_create`, `number`, [`number`, `number`, `number`, `number`]),
        fromBuffer: libzip_1.default.cwrap(`zip_source_buffer`, `number`, [`number`, `number`, ...number64, `number`]),
        free: libzip_1.default.cwrap(`zip_source_free`, `void`, [`number`]),
    },
    struct: {
        stat: libzip_1.default.cwrap(`zipstruct_stat`, `number`, []),
        statS: libzip_1.default.cwrap(`zipstruct_statS`, `number`, []),
        statName: libzip_1.default.cwrap(`zipstruct_stat_name`, `string`, [`number`]),
        statIndex: libzip_1.default.cwrap(`zipstruct_stat_index`, `number`, [`number`]),
        statSize: libzip_1.default.cwrap(`zipstruct_stat_size`, `number`, [`number`]),
        statMtime: libzip_1.default.cwrap(`zipstruct_stat_mtime`, `number`, [`number`]),
        error: libzip_1.default.cwrap(`zipstruct_error`, `number`, []),
        errorS: libzip_1.default.cwrap(`zipstruct_errorS`, `number`, []),
    },
};
